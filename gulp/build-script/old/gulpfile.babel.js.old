import gulp from "gulp";
import zip from "gulp-zip";
import tap from "gulp-tap";
import sass from "gulp-sass";
import babel from "gulp-babel";
import rename from "gulp-rename";
import eslint from "gulp-eslint";
import uglify from "gulp-uglify";
import replace from "gulp-replace";
import imageMin from "gulp-imagemin";
import strip from "gulp-strip-comments";    //删除代码注释
import fileInclude from "gulp-file-include";
import autoPreFixer from "gulp-autoprefixer";

import del from "del";
import path from "path";
import browserSync from "browser-sync";
import proxy from "http-proxy-middleware";

import Module from "./module.js";

//==========================================================================================
// build
//==========================================================================================

//images

function buildImages(module, enableMin) {
    if (enableMin)
        return gulp.src(module.modulePathImg + '/*').pipe(imageMin()).pipe(gulp.dest('./build/static/images/' + module.moduleName + '/'));
    else
        return gulp.src(module.modulePathImg + '/*').pipe(gulp.dest('./build/static/images/' + module.moduleName + '/'));
}

function buildImagesCommonTask() {
    return gulp.src('./src/base/common/img/*').pipe(imageMin()).pipe(gulp.dest('./build/static/images/common/'));
}

function buildImagesCommonWithoutMinTask() {
    return gulp.src('./src/base/common/img/*').pipe(gulp.dest('./build/static/images/common/'));
}


/**
 * sass
 *
 * fixme important
 * 由于生产环境只识别 url("../../images/20170920hd/mt_bg.png")
 * 新框架由于目录结构调整会使用 url("../img/mt_bg.png")
 * 所以最终编译时需要替换为生产环境可识别的路径，即必须执行 .pipe(replace('../img', '../../images/' + module.moduleName))
 *
 * @param module
 * @returns {*}
 */
function buildScss(module) {
    return gulp.src(module.modulePathScss + '/*.scss')
        .pipe(strip.text())
        .pipe(replace('../img', '../../images/' + module.moduleName)) //fixme important
        .pipe(sass({precision: 10, outputStyle: 'compact', errLogToConsole: true}).on('error', sass.logError))
        .pipe(autoPreFixer({browsers: ['> 1%', 'Last 10 versions', 'IE 8'], cascade: true, remove: true}))
        .pipe(gulp.dest('./build/static/styles/' + module.moduleName + '/'))

        .pipe(sass({precision: 10, outputStyle: 'compressed', errLogToConsole: true}).on('error', sass.logError))
        .pipe(autoPreFixer({browsers: ['> 1%', 'Last 10 versions', 'IE 8'], cascade: true, remove: true}))
        .pipe(rename({suffix: '.min', extname: '.css'}))
        .pipe(gulp.dest('./build/static/styles/' + module.moduleName + '/'));
}

function buildScssCommonTask() {
    return gulp.src('./src/base/common/scss/*.scss')
        .pipe(strip.text())
        .pipe(sass({precision: 10, outputStyle: 'compact', errLogToConsole: true}).on('error', sass.logError))
        .pipe(autoPreFixer({browsers: ['> 1%', 'Last 10 versions', 'IE 8'], cascade: true, remove: true}))
        .pipe(gulp.dest('./build/static/styles/'))

        .pipe(sass({precision: 10, outputStyle: 'compressed', errLogToConsole: true}).on('error', sass.logError))
        .pipe(autoPreFixer({browsers: ['> 1%', 'Last 10 versions', 'IE 8'], cascade: true, remove: true}))
        .pipe(rename({suffix: '.min', extname: '.css'}))
        .pipe(gulp.dest('./build/static/styles/'));
}


function buildPluginsTask() {
    return gulp.src(['./src/base/plugins/**/*.css', './src/base/plugins/**/*.js']).pipe(gulp.dest('./build/static/plugins/'))
}

//scripts
function buildJs(module) {
    return gulp.src(module.modulePathJs + '/*.js')
        .pipe(strip.text())
        .pipe(babel({
            presets: ['env']//['env']
        }))
        //.pipe(eslint({configFle: './.eslintrc.js'})).pipe(eslint.format()).pipe(eslint.failOnError())
        .pipe(gulp.dest('./build/static/scripts/' + module.moduleName + '/'))
        .pipe(uglify())
        .pipe(rename({suffix: '.min'}))
        .pipe(gulp.dest('./build/static/scripts/' + module.moduleName + '/'));
}

function buildJsCommonTask() {
    return gulp.src('./src/base/common/js/*.js')
        .pipe(strip.text())
        .pipe(babel({
            presets: ['env']//['env']
        }))
        //.pipe(eslint({configFle: './.eslintrc.js'})).pipe(eslint.format()).pipe(eslint.failOnError())
        .pipe(gulp.dest('./build/static/scripts/'))
        .pipe(uglify())
        .pipe(rename({suffix: '.min'}))
        .pipe(gulp.dest('./build/static/scripts/'));
}


/**
 * html
 *
 * fixme important
 * 由于生产环境只识别 url("../../static/images/20170920hd/mt_bg.png")
 * 新框架由于目录结构调整会使用 url("../img/mt_bg.png")
 * 所以最终编译时需要替换为生产环境可识别的路径，即必须执行 .pipe(replace('../img', '../../static/images/20170920hd' + module.moduleName))
 *
 * @param module
 * @returns {*}
 */
function buildHtml(module) {
    return gulp.src(module.modulePathHtml + '/*.html').pipe(tap(function (file) {
        let htmlName = path.basename(file.path).replace('.html', '');
        gulp.src(module.moduleTemplateFilePath)
            .pipe(strip.text())
            .pipe(fileInclude({prefix: '@@', basepath: '@file', context: {moduleName: module.moduleName, htmlName: htmlName}}))
            .pipe(replace('../img', '../../static/images/' + module.moduleName)) //fixme important
            .pipe(rename({basename: htmlName, extname: '.html'}))
            .pipe(gulp.dest('./build/static/' + module.moduleName + '/'));
    }));
}

//watch
function watch(module) {
    gulp.watch([module.modulePathJs + '/*.js'], gulp.series(cleanJsTask, buildJsTask, reloadTask));
    gulp.watch([module.modulePathScss + '/*.scss'], gulp.series(cleanScssTask, buildScssTask, reloadTask));
    gulp.watch([module.modulePathHtml + '/*.html', module.moduleTemplateFilePath], gulp.series(cleanHtmlTask, buildHtmlTask, reloadTask));
    gulp.watch([module.modulePathImg + '/*'], gulp.series(cleanImagesTask, buildImagesTask, reloadTask));
}

function zipJs(module) {
    return gulp.src('./build/static/scripts/' + module.moduleName + '/*.min.js', {base: './build/static/scripts/'})
        .pipe(zip('zip/js/' + module.moduleName + '.zip'))
        .pipe(gulp.dest(module.buildPath));
}

function zipImages(module) {
    return gulp.src('./build/static/images/' + module.moduleName + '/*', {base: './build/static/images/'})
        .pipe(zip('zip/img/' + module.moduleName + '.zip'))
        .pipe(gulp.dest(module.buildPath));
}

function zipScss(module) {
    return gulp.src('./build/static/styles/' + module.moduleName + '/*.min.css', {base: './build/static/styles/'})
        .pipe(zip('zip/css/' + module.moduleName + '.zip'))
        .pipe(gulp.dest(module.buildPath));
}

function zipHtml(module) {
    return gulp.src('./build/static/' + module.moduleName + '/*.html', {base: './build/static/'})
        .pipe(zip('zip/' + module.moduleName + '.zip'))
        .pipe(gulp.dest(module.buildPath));
}

//remove images build
function cleanImages(module) {
    return del([module.buildModulePathImg, module.moduleName + '-images.zip']);
}

function cleanHtml(module) {
    return del([module.buildModulePathHtml, module.moduleName + '-html.zip']);
}

function cleanScss(module) {
    return del([module.buildModulePathScss, module.moduleName + '-css.zip']);
}

function cleanJs(module) {
    return del([module.buildModulePathJs, module.moduleName + '-js.zip']);
}

//==========================================================================================
// tasks
//==========================================================================================
function zipAll(done) {
    zipJs(module);
    zipImages(module);
    zipScss(module);
    zipHtml(module);
    return done();
}

function zipJsTask() {
    return zipJs(module);
}

function zipImagesTask() {
    return zipImages(module);
}

function zipScssTask() {
    return zipScss(module);
}

function zipHtmlTask() {
    return zipHtml(module);
}

function buildImagesTask() {
    return buildImages(module, true);
}

function buildImagesWithoutMinTask() {
    return buildImages(module, false);
}

function buildScssTask() {
    return buildScss(module);
}

function buildJsTask() {
    return buildJs(module);
}

function buildHtmlTask() {
    return buildHtml(module);
}

function watchTask() {
    return watch(module);
}

function cleanImagesTask() {
    return cleanImages(module);
}

function cleanJsTask() {
    return cleanJs(module);
}

function cleanScssTask() {
    return cleanScss(module);
}

function cleanHtmlTask() {
    return cleanHtml(module);
}

function cleanTask() {
    return del(['build']);
}

function reloadTask(done) {
    browserSync.reload();
    done();
}

function syncTask() {
    return browserSync({
        server: {
            baseDir: './build/',
            //index: 'static/' + module.moduleName + '/index.html'
        },
        port: 9999
    });
}

//==========================================================================================
// default
//==========================================================================================

let module = new Module('20170920hd_sh');

gulp.task('default', //no imageMin no zip
    gulp.series(
        cleanTask,
        gulp.parallel(buildImagesWithoutMinTask, buildImagesCommonWithoutMinTask, buildScssCommonTask, buildJsCommonTask, buildPluginsTask, buildScssTask, buildJsTask, buildHtmlTask),
        gulp.parallel(syncTask, watchTask)
    )
);

gulp.task('build', //do imageMin and zip
    gulp.series(
        cleanTask,
        gulp.parallel(buildImagesTask, buildImagesCommonTask, buildScssCommonTask, buildJsCommonTask, buildPluginsTask, buildScssTask, buildJsTask, buildHtmlTask),
        zipAll
    )
);

gulp.task('clean', gulp.series(cleanTask));
