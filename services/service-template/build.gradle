buildscript {
    ext {
        kotlinVersion = '1.1.51'
        springBootVersion = '1.5.8.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'war'
apply plugin: 'org.hidetake.ssh'
apply plugin: 'org.springframework.boot'

group = 'com.smart'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

compileKotlin { kotlinOptions.jvmTarget = "1.8" }
compileTestKotlin { kotlinOptions.jvmTarget = "1.8" }

repositories {
    jcenter()
    mavenCentral()
}

configurations {
    all*.exclude module: 'spring-boot-starter-logging'
}

war {
    archiveName 'template.war'
}

ext {
    ssh_host = "127.0.0.1"
    ssh_user = ""
    ssh_password = ""

    Properties properties = new Properties()
    try {
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        ssh_host = properties.getProperty("ssh.host")
        ssh_user = properties.getProperty("ssh.user")
        ssh_password = properties.getProperty("ssh.password")

        print("read local.properties success,ssh.host=${ssh_host} and ssh.user=${ssh_user} and ssh.password=${ssh_password}")
    } catch (Exception e) {
        e.printStackTrace()
        print("read local.properties failure,ssh.host=${ssh_host} and ssh.user=${ssh_user} and ssh.password=${ssh_password}")
    }
}

//======================================================================================================================
// deploy by ssh
//======================================================================================================================
task deployBySSH(type: Exec) {
    executable "sh"
    //noinspection GroovyAssignabilityCheck
    args "-c", "/usr/local/bin/sshpass -p ${ssh_password} scp ~/Desktop/test ${ssh_user}@${ssh_host}:/usr/software/tomcat/apache-tomcat-8.0.47/webapps/"
}
deployBySSH.dependsOn("clean", "war")
//======================================================================================================================
// deploy by gradle-ssh-plugin
//======================================================================================================================
remotes {
    serverHousekeeper {
        host = ssh_host
        user = ssh_user
        password = ssh_password
    }
}

task deploy {
    doLast {
        ssh.run {
            session(remotes.serverHousekeeper) {
                put from: 'build/libs/template.war', into: '/usr/software/tomcat/apache-tomcat-8.0.47/webapps/'
                // execute 'service tomcat restart'
            }
        }
    }
}
deploy.dependsOn("clean", "war")

task deployLocal(type: Copy) {
    from 'build/libs/template.war'
    into '/Users/maokangren/software/apache-tomcat-8.5.23/webapps/'
    rename('template.war', 'template.war')
}
deployLocal.dependsOn("clean", "war")
//======================================================================================================================
// deploy end
//======================================================================================================================

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    // compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-log4j2')
    compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1')
    compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}")
    compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    compile 'com.alibaba:druid-spring-boot-starter:1.1.5'

    runtime('org.springframework.boot:spring-boot-devtools')
    runtime('mysql:mysql-connector-java')

    testCompile('org.springframework.boot:spring-boot-starter-test')

    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
    // compile('org.springframework.boot:spring-boot-starter-tomcat')
}
